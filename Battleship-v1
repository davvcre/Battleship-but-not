
emptyTile = 0
shiptile = 1
sunkenShip = 2
shotOnEmpty = 3

def new_game_board():
    return [[emptyTile] * 3 for _ in range(3)]
    
def is_empty(value):
    if value == emptyTile:
        return True
    return False

def is_ship(value):
    if value == shiptile:
        return True
    return False

def is_sunken(value):
    if value == sunkenShip:
        return True
    return False

def shot_on_tile(grid,x, y):
    if is_ship(grid[y][x]):
        grid[y][x] = sunkenShip
    elif is_empty(grid[y][x]):
        grid[y][x] = shotOnEmpty

def grid_to_strings(grid):
    symbol_map = {emptyTile: " ", shiptile: "B", sunkenShip: "X", shotOnEmpty: "O"}
    return [[symbol_map.get(cell, "O") for cell in row] for row in grid]


def view_game_board(grid):
    c  = 65
    pGrid = grid_to_strings(grid)
    print()
    print(f"  ", end='')
    for i in range(len(pGrid[0])):
        print(f"| {i+1} ", end='')
    print("| ")
    print((len(pGrid[0])*4+4)*"-")
    for j in range(len(pGrid)):
        print(f"{chr(c + j)} ", end='')
        for k in range(len(pGrid[j])):
            print(f"| {pGrid[j][k]} ", end='')
        print('| ')
        print((len(pGrid[0])*4+4)*"-")



ts = new_game_board()
shot_on_tile(ts, 1, 1)
print(ts)
view_game_board(ts)
print(ts)