
emptyTile = 0
shiptile = 1
sunkenShip = 2
shotOnEmpty = 3
gridSize = 3

def new_game_board():
    return [[emptyTile] * gridSize for _ in range(gridSize)]
    
def is_empty(value):
    if value == emptyTile:
        return True
    return False

def is_ship(value):
    if value == shiptile:
        return True
    return False

def is_sunken(value):
    if value == sunkenShip:
        return True
    return False

def shot_on_tile(grid,x, y):
    if is_ship(grid[y][x]):
        grid[y][x] = sunkenShip
    elif is_empty(grid[y][x]):
        grid[y][x] = shotOnEmpty

def grid_to_strings(grid):
    symbol_map = {emptyTile: " ", shiptile: "B", sunkenShip: "X", shotOnEmpty: "O"}
    return [[symbol_map.get(cell, "O") for cell in row] for row in grid]

def view_game_board(grid):
    c  = 65
    pGrid = grid_to_strings(grid)
    print()
    print(f"  ", end='')
    for i in range(len(pGrid[0])):
        print(f"| {i+1} ", end='')
    print("| ")
    print((len(pGrid[0])*4+4)*"-")
    for j in range(len(pGrid)):
        print(f"{chr(c + j)} ", end='')
        for k in range(len(pGrid[j])):
            print(f"| {pGrid[j][k]} ", end='')
        print('| ')
        print((len(pGrid[0])*4+4)*"-")

def placment_input(grid_size):
    while True:
        user_input = input(f"Enter a grid reference (e.g., A1 to {chr(ord('A') + grid_size - 1)}{grid_size}): ").upper()
        if len(user_input) != 2:
            print(f"Invalid input: {user_input}. Please enter a valid square.")
            continue
        row, col = user_input[0], user_input[1]
        max_row = chr(ord('A') + grid_size - 1)
        if row < 'A' or row > max_row:
            print(f"Invalid row: {row}. Please enter a row between A and {max_row}.")
            continue
        if not col.isdigit() or int(col) < 1 or int(col) > grid_size:
            print(f"Invalid column: {col}. Please enter a column between 1 and {grid_size}.")
            continue
        return user_input


ts = new_game_board()
shot_on_tile(ts, 1, 1)
print(ts)
view_game_board(ts)
print(ts)